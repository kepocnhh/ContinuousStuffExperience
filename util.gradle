private def getFileText(String filePath) {
    def file = file(filePath)
    if(file == null || !file.exists()) {
        throw new IllegalStateException("File by path \"$filePath\" must exist!")
    }
    return file.getText("UTF-8")
}

private def getTestCoverageResult(String filePath) {
    def root = parseXml(getFileText(filePath))
    def result = 1.0
    def counters = root.counter.each {
        def missed = it.@missed.toInteger()
        def covered = it.@covered.toInteger()
        def sum = missed + covered
        result = (result + covered / sum) / 2
    }
    return result
}

private def parseXml(String data) {
    def xmlParser = new XmlParser()
    xmlParser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false) 
    xmlParser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
    return xmlParser.parseText(data)
}

private def getTestCoverageResultBadgeColor(double result) {
    if(result > 1 || result < 0) {
        throw new IllegalStateException("Test coverage must be in [0..1] but $result!")
    } else if(result < 0.5) {
        return "d50000"
    } else if(result < 0.75) {
        return "ffd600"
    } else {
        return "00c853"
    }
}

private def createBadgeUrl(String urlTitle, String urlValue, String color) {
    return "https://img.shields.io/badge/$urlTitle-$urlValue-${color}.svg?style=flat"
}

ext {
    getFileText = this.&getFileText
    getTestCoverageResult = this.&getTestCoverageResult

    getTestCoverageReportHash = { String filePath, String hashType ->
        def root = parseXml(getFileText(filePath))
        root.sessioninfo.each {
            root.remove(it)
        }
        return root.text().digest(hashType)
    }
    
    getTestCoverageResultBadgeColor = this.&getTestCoverageResultBadgeColor
    createBadgeUrl = this.&createBadgeUrl
}