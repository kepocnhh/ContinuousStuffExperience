buildscript {
    ext {
        jacocoVersion = "0.8.4"
    }
    apply from: 'kotlin.gradle'

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

repositories {
    mavenCentral()
}

apply from: "util.gradle"
apply plugin: 'jacoco'

evaluationDependsOnChildren()

task clean(type: Delete) {
    delete rootProject.buildDir
}

task compile {
    dependsOn clean
    dependsOn subprojects.tasks.collectMany { it }.findAll { it.name.startsWith("compile") }
}

def reportsPath = "$buildDir/reports"
def testingReportPath = "$reportsPath/testing"

task collectTestingReport(type: TestReport) {
	destinationDir = file("$testingReportPath/html")
	testResultDirs = subprojects*.test.binResultsDir
    doLast {
        def signatureFile = file("$testingReportPath/signature")
        signatureFile.delete()
        signatureFile << getTestingSignature(testResultDirs).digest("SHA-512")
    }
}

task runTests {
	def tasks = subprojects*.test
	def size = tasks.size
	if(size == 0) {
    	println "\tno test tasks"
		return
	}
	for(def i=0; i<size-1; i++) {
		tasks[i].finalizedBy tasks[i+1]
	}
    dependsOn tasks.first()
}


jacoco {
  toolVersion = jacocoVersion
}

def testCoverageReportPath = "$reportsPath/coverage"
def testCoverageReportXmlFullPath = "$testCoverageReportPath/xml/report.xml"

task collectTestCoverageReport(type: JacocoReport) {
    def projects = subprojects.findAll {
        it.pluginManager.hasPlugin("jacoco") && it.tasks.find { it.name == "test" } != null
    }
    reports {
        xml.enabled true
        xml.destination file(testCoverageReportXmlFullPath)
        html.enabled true
        html.destination file("$testCoverageReportPath/html")
        csv.enabled false
    }
    getAdditionalSourceDirs().from(files(projects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().from(files(projects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().from(files(projects.sourceSets.main.output))
    getExecutionData().from(files(projects.jacocoTestReport.executionData))
    doLast {
        def files = []
        file(testCoverageReportPath).eachFileRecurse {
            if(!it.isDirectory())
            if(!it.name.contains("jacoco-sessions"))
            if(it.name.endsWith(".html")) {
                files.add(it)
            }
        }
        def result = files.sort { it.absolutePath }.inject("") { accumulator, file ->
            accumulator + getFileText(file.absolutePath)
        }
        def signatureFile = file("$testCoverageReportPath/signature")
        signatureFile.delete()
        signatureFile << result.digest("SHA-512")
    }
}

task runTestCoverageVerification {
    doLast {
        def result = getTestCoverageResult(testCoverageReportXmlFullPath)
        println "\ttest coverage result: " + (100*result).toLong().toString() + "%"
    }
}

dependencies {
    jacocoAnt "org.jacoco:org.jacoco.ant:$jacocoVersion"
}

private def getTestCoverageBadge(String signaturePath, String reportXmlPath) {
    def result = getTestCoverageResult(reportXmlPath)
    def badgeUrl = createBadgeUrl(
        "test_coverage",
        (100*result).toLong().toString() + "%25",
        getTestCoverageResultBadgeColor(result)
    )
    def hash = getFileText(signaturePath)
    if(hash == null || hash.isEmpty()) {
        throw new IllegalStateException("Test coverage signature must not be empty!")
    }
    def reportUrl = "https://kepocnhh.github.io/ContinuousStuffExperience/reports/coverage/$hash"
    return "[![test coverage]($badgeUrl)]($reportUrl)"
}
private def getTestingBadge(String signaturePath, String reportHtmlPath) {
    def isPassed = getTestingResult(reportHtmlPath)
    def resultText = "passed"
    if(!isPassed) {
        resultText = "failed"
    }
    def badgeUrl = createBadgeUrl(
        "testing",
        resultText,
        getTestingResultBadgeColor(isPassed)
    )
    def hash = getFileText(signaturePath)
    if(hash == null || hash.isEmpty()) {
        throw new IllegalStateException("Testing signature must not be empty!")
    }
    def reportUrl = "https://kepocnhh.github.io/ContinuousStuffExperience/reports/testing/$hash"
    return "[![testing]($badgeUrl)]($reportUrl)"
}

task checkReadme() {
    doLast {
        def readmeFileName = "README.md"
        def readmeText = getFileText(readmeFileName)
        if(readmeText == null || readmeText.isEmpty()) {
            throw new IllegalStateException("File $readmeFileName must not be empty!")
        }
        def testCoverageBadge = getTestCoverageBadge(
            "$testCoverageReportPath/signature",
            testCoverageReportXmlFullPath
        )
        if(!readmeText.contains(testCoverageBadge)) {
            throw new IllegalStateException(
                "File $readmeFileName must contains test coverage result badge:\n$testCoverageBadge"
            )
        }
        def testingBadge = getTestingBadge(
            "$testingReportPath/signature",
            "$testingReportPath/html/index.html"
        )
        if(!readmeText.contains(testingBadge)) {
            throw new IllegalStateException(
                "File $readmeFileName must contains testing result badge:\n$testingBadge"
            )
        }
    }
}