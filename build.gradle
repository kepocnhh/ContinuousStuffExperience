buildscript {
    ext {
        jacocoVersion = "0.8.4"
    }
    apply from: 'kotlin.gradle'

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

repositories {
    mavenCentral()
}

apply from: "util.gradle"
apply plugin: 'jacoco'

evaluationDependsOnChildren()

task collectTestReports(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	testResultDirs = subprojects*.test.binResultsDir
}

task runTests {
	def tasks = subprojects*.test
	def size = tasks.size
	if(size == 0) {
    	println "\tno test tasks"
		return
	}
	for(def i=0; i<size-1; i++) {
		tasks[i].finalizedBy tasks[i+1]
	}
    dependsOn tasks.first()
}


jacoco {
  toolVersion = jacocoVersion
}

def testCoverageReportsPath = "$buildDir/reports/coverage"
def testCoverageReportXmlFileName = "testCoverageReport.xml"

task collectTestCoverageReports(type: JacocoReport) {
    def projects = subprojects.findAll {
        it.pluginManager.hasPlugin("jacoco") && it.tasks.find { it.name == "test" } != null
    }
    reports {
        xml.enabled true
        xml.destination file("$testCoverageReportsPath/$testCoverageReportXmlFileName")
        html.enabled true
        html.destination file(testCoverageReportsPath)
        csv.enabled false
    }
    getAdditionalSourceDirs().from(files(projects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().from(files(projects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().from(files(projects.sourceSets.main.output))
    getExecutionData().from(files(projects.jacocoTestReport.executionData))
}

task runTestCoverageVerification {
    doLast {
        def result = getTestCoverageResult("$testCoverageReportsPath/$testCoverageReportXmlFileName")
        println "\ttest coverage result: " + (100*result).toLong().toString() + "%"
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

dependencies {
    jacocoAnt "org.jacoco:org.jacoco.ant:$jacocoVersion"
}

task checkReadme() {
    doLast {
        def testCoverageResult = getTestCoverageResult("$testCoverageReportsPath/$testCoverageReportXmlFileName")
        def testCoverageBadgeUrl = createBadgeUrl(
            "test_coverage",
            (100*testCoverageResult).toLong().toString() + "%25",
            getTestCoverageResultBadgeColor(testCoverageResult)
        )
        def readmeFileName = "README.md"
        def readmeText = getFileText(readmeFileName)
        if(readmeText == null || readmeText.isEmpty()) {
            throw new IllegalStateException("File $readmeFileName must not be empty!")
        }
        def testCoverageBadge = "![test coverage]($testCoverageBadgeUrl)"
        if(!readmeText.contains(testCoverageBadge)) {
            throw new IllegalStateException(
                "File $readmeFileName must contains test coverage result badge:\n$testCoverageBadge"
            )
        }
    }
}